# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, Hideki Hokuto
# This file is distributed under the same license as the Algolib package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Algolib \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-28 00:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/api/algolib.numerics.rst:2
msgid "algolib.numerics package"
msgstr ""

#: ../source/api/algolib.numerics.rst:5
msgid "Submodules"
msgstr ""

#: ../source/api/algolib.numerics.rst:8
msgid "algolib.numerics.constants module"
msgstr ""

#: ../../src/algolib/numerics/constants.py:docstring of algolib.numerics.constants:1
msgid "Centralized numerical constants for algolib."
msgstr ""

#: ../../src/algolib/numerics/constants.py:docstring of algolib.numerics.constants:3
msgid "No imports from `math` or third-party libs: *pure Python floats only*."
msgstr ""

#: ../../src/algolib/numerics/constants.py:docstring of algolib.numerics.constants:4
msgid "Values are given either as exact decimal, or with comments showing hex-float"
msgstr ""

#: ../../src/algolib/numerics/constants.py:docstring of algolib.numerics.constants:5
msgid "for traceability."
msgstr ""

#: ../../src/algolib/numerics/constants.py:docstring of algolib.numerics.constants:6
msgid "Includes Cody-Waite style splits for stable range-reduction in exp/sin/cos."
msgstr ""

#: ../../src/algolib/exceptions.py:docstring of algolib.exceptions.NumericOverflowError:1
msgid "Bases: :py:class:`~algolib.exceptions.AlgolibError`, :py:class:`OverflowError`"
msgstr ""

#: ../../src/algolib/exceptions.py:docstring of algolib.exceptions.NumericOverflowError:1
msgid "Numeric overflow exposed as algolib-specific error."
msgstr ""

#: ../source/api/algolib.numerics.rst:16
msgid "algolib.numerics.diff module"
msgstr ""

#: ../../src/algolib/numerics/diff.py:docstring of algolib.numerics.diff.derivative_central:1
msgid "Central difference derivative approximation with Richardson extrapolation."
msgstr ""

#: ../../src/algolib/numerics/diff.py:docstring of algolib.numerics.diff.derivative_central:3
msgid "Useful when f does not support complex input. Accuracy is O(h^2) per step and improved by extrapolation."
msgstr ""

#: ../../src/algolib/numerics/diff.py:docstring of algolib.numerics.diff.derivative_cstep:1
msgid "Complex-step derivative approximation:"
msgstr ""

#: ../../src/algolib/numerics/diff.py:docstring of algolib.numerics.diff.derivative_cstep:3
msgid "f'(x) ≈ Im(f(x + i*h)) / h"
msgstr ""

#: ../../src/algolib/numerics/diff.py:docstring of algolib.numerics.diff.derivative_cstep:5
msgid "Requires f to support complex input. Very stable since there is no subtractive cancellation."
msgstr ""

#: ../source/api/algolib.numerics.rst:24
msgid "algolib.numerics.sqrt module"
msgstr ""

#: ../../src/algolib/numerics/__init__.py:docstring of algolib.numerics.sqrt.newton_sqrt:1
#: ../../src/algolib/numerics/sqrt.py:docstring of algolib.numerics.sqrt.newton_sqrt:1
msgid "Square root via Newton–Raphson iteration (overflow-safe update)."
msgstr ""

#: ../../src/algolib/numerics/__init__.py:docstring of algolib.numerics.sqrt.newton_sqrt:4
#: ../../src/algolib/numerics/sqrt.py:docstring of algolib.numerics.sqrt.newton_sqrt:4
#: ../../src/algolib/numerics/trig.py:docstring of algolib.numerics.trig.tan:4
msgid "Notes"
msgstr ""

#: ../../src/algolib/numerics/__init__.py:docstring of algolib.numerics.sqrt.newton_sqrt:5
#: ../../src/algolib/numerics/sqrt.py:docstring of algolib.numerics.sqrt.newton_sqrt:5
msgid "Uses the overflow-safe iteration y_{k+1} = 0.5 * (y_k + x / y_k). The initial guess is derived from the binary exponent of `x` (parsed via float.hex) to match the magnitude of sqrt(x)."
msgstr ""

#: ../source/api/algolib.numerics.rst:32
msgid "algolib.numerics.stable module"
msgstr ""

#: ../../src/algolib/numerics/__init__.py:docstring of algolib.numerics.stable.hypot:1
#: ../../src/algolib/numerics/stable.py:docstring of algolib.numerics.stable.hypot:1
msgid "Stable :math:`\\sqrt{x^2 + y^2}` with overflow/underflow protections."
msgstr ""

#: ../../src/algolib/numerics/__init__.py:docstring of algolib.numerics.stable.hypot_n:1
#: ../../src/algolib/numerics/stable.py:docstring of algolib.numerics.stable.hypot_n:1
msgid "Stable Euclidean norm for :math:`N` components: :math:`\\sqrt{\\sum_i xs[i]^2}`."
msgstr ""

#: ../source/api/algolib.numerics.rst:40
msgid "algolib.numerics.trig module"
msgstr ""

#: ../../src/algolib/numerics/trig.py:docstring of algolib.numerics.trig.cos:1
msgid "Cosine of an angle (system backend)."
msgstr ""

#: ../source/api/algolib.numerics.rst:0
msgid "Parameters"
msgstr ""

#: ../../src/algolib/numerics/trig.py:docstring of algolib.numerics.trig.cos:3
#: ../../src/algolib/numerics/trig.py:docstring of algolib.numerics.trig.sin:3
#: ../../src/algolib/numerics/trig.py:docstring of algolib.numerics.trig.tan:9
msgid "Input angle in radians."
msgstr ""

#: ../source/api/algolib.numerics.rst:0
msgid "Returns"
msgstr ""

#: ../../src/algolib/numerics/trig.py:docstring of algolib.numerics.trig.cos:6
msgid "``cos(x)`` evaluated by the active numerics backend."
msgstr ""

#: ../source/api/algolib.numerics.rst:0
msgid "Return type"
msgstr ""

#: ../../src/algolib/numerics/trig.py:docstring of algolib.numerics.trig.sin:1
msgid "Sine of an angle (system backend)."
msgstr ""

#: ../../src/algolib/numerics/trig.py:docstring of algolib.numerics.trig.sin:6
msgid "``sin(x)`` evaluated by the active numerics backend."
msgstr ""

#: ../../src/algolib/numerics/trig.py:docstring of algolib.numerics.trig.tan:1
msgid "Tangent of an angle (system backend)."
msgstr ""

#: ../../src/algolib/numerics/trig.py:docstring of algolib.numerics.trig.tan:5
msgid "Argument-reduction and non-finite handling are performed inside the active backend (see ``_backend.SystemTrigBackend.tan``). Keeping this wrapper free of extra reduction ensures consistent periodicity tests."
msgstr ""

#: ../../src/algolib/numerics/trig.py:docstring of algolib.numerics.trig.tan:12
msgid "``tan(x)`` evaluated by the active numerics backend."
msgstr ""

#: ../source/api/algolib.numerics.rst:48
msgid "algolib.numerics.trig\\_pure module"
msgstr ""

#: ../../src/algolib/numerics/trig_pure.py:docstring of algolib.numerics.trig_pure:1
msgid "Numerical trig functions: sin / cos / tan"
msgstr ""

#: ../../src/algolib/numerics/trig_pure.py:docstring of algolib.numerics.trig_pure:3
msgid "No stdlib math usage in implementation"
msgstr ""

#: ../../src/algolib/numerics/trig_pure.py:docstring of algolib.numerics.trig_pure:4
msgid "Cody-Waite style range reduction by π/2"
msgstr ""

#: ../../src/algolib/numerics/trig_pure.py:docstring of algolib.numerics.trig_pure:5
msgid "Polynomial approximation on [-π/4, π/4]"
msgstr ""

#: ../../src/algolib/numerics/trig_pure.py:docstring of algolib.numerics.trig_pure.PureTrigBackend:1
msgid "Bases: :py:class:`object`"
msgstr ""

#: ../../src/algolib/numerics/trig_pure.py:docstring of algolib.numerics.trig_pure.PureTrigBackend:1
msgid "Wrap current pure-Python trig implementations as a backend."
msgstr ""

#: ../source/api/algolib.numerics.rst:56
msgid "Module contents"
msgstr ""
