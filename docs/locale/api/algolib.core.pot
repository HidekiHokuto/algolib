# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, Hideki Hokuto
# This file is distributed under the same license as the Algolib package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Algolib \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-18 09:42+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/api/algolib.core.rst:2
msgid "algolib.core package"
msgstr ""

#: ../source/api/algolib.core.rst:5
msgid "Submodules"
msgstr ""

#: ../source/api/algolib.core.rst:8
msgid "algolib.core.complex module"
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex:1
msgid "A lightweight Complex number implementation (without using Python's built-in ``complex``)."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex:3
msgid "This module provides a small, well-documented ``Complex`` class suitable for learning and algorithmic implementations. It supports algebraic form (a + bi) and polar form (r·e^{iθ}), with common operations."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex:8
msgid "Notes"
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex:9
msgid "This class uses plain floats and is immutable."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex:10
msgid "We intentionally avoid Python's built-in :class:`complex` to practice fundamentals."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex:13
msgid "Examples"
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex:1
msgid "Bases: :py:class:`object`"
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex:1
msgid "Complex number in algebraic form :math:`a + b \\mathrm{i}`."
msgstr ""

#: ../source/api/algolib.core.rst:0
msgid "Parameters"
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex:3
msgid "Real part :math:`a`."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex:5
msgid "Imaginary part :math:`b`."
msgstr ""

#: ../source/api/algolib.core.rst:0
msgid "Raises"
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex:8
msgid "If either part is not a real number (int/float)."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.almost_equal:1
msgid "Return True if each component differs by at most ``tol`` (absolute)."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.almost_equal:3
msgid "This is safer than exact float equality."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.argument:1
msgid "Return the principal argument :math:`\\arg z \\in (-\\pi, \\pi]`."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.argument:3
msgid "Uses :func:`math.atan2`."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.conjugate:1
msgid "Return the complex conjugate :math:`\\overline{z} = a - b i`."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.from_cartesian:1
msgid "Construct from Cartesian coordinates (re, im). :param re: Real part. :param im: Imaginary part. :returns: Complex number corresponding to :math:`(re, im)`."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.from_iterable:1
msgid "Construct from an iterable of two numbers."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.from_iterable:3
msgid "Iterable ``(re, im)``."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.from_iterable:4
msgid "If iterable does not have exactly two numeric elements."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.from_polar:1
msgid "Construct from polar coordinates :math:`(r, \\theta)`."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.from_polar:3
msgid "Modulus (radius). Must be non-negative."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.from_polar:4
msgid "Argument (angle in radians)."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.from_polar:5
msgid "If ``r < 0``."
msgstr ""

#: ../source/api/algolib.core.rst:0
msgid "Returns"
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.from_polar:6
msgid "Complex number corresponding to :math:`r(\\cos\\theta + i\\sin\\theta)`."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.modulus:1
msgid "Return the modulus :math:`\\\\abs{z} = \\\\sqrt{a^2 + b^2}`."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.normalized:1
msgid "Return :math:`z / |z|`. Raises if :math:`z = 0`."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.normalized:3
msgid "This implementation performs a second, tiny rescaling step so that the final norm is ~1 within a few ULP even for subnormals."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.to_polar:1
msgid "Return ``(r, theta)`` with :math:`r = |z|` and :math:`\\theta = \\arg z`."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.to_tuple:1
msgid "Return ``(re, im)``."
msgstr ""

#: ../source/api/algolib.core.rst:16
msgid "Module contents"
msgstr ""
