# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, Hideki Hokuto
# This file is distributed under the same license as the Algolib package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Algolib \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-18 18:17+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/api/algolib.core.rst:2
msgid "algolib.core package"
msgstr ""

#: ../source/api/algolib.core.rst:5
msgid "Submodules"
msgstr ""

#: ../source/api/algolib.core.rst:8
msgid "algolib.core.complex module"
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex:1
msgid "A lightweight Complex number implementation (without using Python's built-in ``complex``)."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex:3
msgid "This module provides a small, well-documented ``Complex`` class suitable for learning and algorithmic implementations. It supports algebraic form (a + bi) and polar form (r·e^{iθ}), with common operations."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex:8
msgid "Notes"
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex:9
msgid "This class uses plain floats and is immutable."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex:10
msgid "We intentionally avoid Python's built-in :class:`complex` to practice fundamentals."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex:13
#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.argument:7
#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.conjugate:7
#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.from_cartesian:12
#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.from_iterable:12
#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.from_polar:15
#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.modulus:7
#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.normalized:9
#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.to_polar:7
#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.to_tuple:7
msgid "Examples"
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex:1
msgid "Bases: :py:class:`object`"
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex:1
msgid "Complex number in algebraic form :math:`a + b \\mathrm{i}`."
msgstr ""

#: ../source/api/algolib.core.rst:0
#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.from_cartesian:0
#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.from_iterable:0
#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.from_polar:0
msgid "Parameters"
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex:3
msgid "Real part :math:`a`."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex:5
msgid "Imaginary part :math:`b`."
msgstr ""

#: ../source/api/algolib.core.rst:0
#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.from_iterable:0
#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.from_polar:0
#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.normalized:0
msgid "Raises"
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex:8
msgid "If either part is not a real number (int/float)."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.almost_equal:1
msgid "Return True if each component differs by at most ``tol`` (absolute)."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.almost_equal:3
msgid "This is safer than exact float equality."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.argument:1
msgid "Compute the principal argument of the complex number."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.argument:0
#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.conjugate:0
#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.from_cartesian:0
#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.from_iterable:0
#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.from_polar:0
#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.modulus:0
#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.normalized:0
#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.to_polar:0
#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.to_tuple:0
msgid "Returns"
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.argument:3
msgid "The argument (angle in radians) in the range :math:`(-\\pi, \\pi]`."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.argument:0
#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.conjugate:0
#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.from_cartesian:0
#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.from_iterable:0
#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.from_polar:0
#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.modulus:0
#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.normalized:0
#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.to_polar:0
#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.to_tuple:0
msgid "Return type"
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.conjugate:1
msgid "Compute the complex conjugate of the number."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.conjugate:3
msgid "The conjugate :math:`a - b \\mathrm{i}`."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.from_cartesian:1
msgid "Construct a complex number from Cartesian coordinates."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.from_cartesian:3
msgid "The real part of the complex number."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.from_cartesian:5
msgid "The imaginary part of the complex number."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.from_cartesian:8
msgid "The complex number corresponding to the Cartesian coordinates."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.from_iterable:1
msgid "Construct a complex number from an iterable of two numbers."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.from_iterable:3
msgid "An iterable containing exactly two elements: the real and imaginary parts."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.from_iterable:6
msgid "The complex number constructed from the iterable."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.from_iterable:9
msgid "If the iterable does not contain exactly two numeric elements."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.from_polar:1
msgid "Construct a complex number from polar coordinates."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.from_polar:3
msgid "The modulus (radius) of the complex number. Must be non-negative."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.from_polar:5
msgid "The argument (angle in radians) of the complex number."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.from_polar:8
msgid "The complex number corresponding to the polar coordinates."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.from_polar:11
msgid "If `r` or `theta` is not a real number."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.from_polar:12
msgid "If `r` is negative."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.modulus:1
msgid "Compute the modulus (absolute value) of the complex number."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.modulus:3
msgid "The modulus :math:`\\sqrt{a^2 + b^2}`."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.normalized:1
msgid "Normalize the complex number by :math:`z/|z|` to have a modulus of 1."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.normalized:3
msgid "The normalized complex number."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.normalized:6
msgid "If the complex number is zero."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.to_polar:1
msgid "Convert the complex number to polar coordinates."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.to_polar:3
msgid "A tuple ``(r, theta)`` where ``r`` is the modulus and ``theta`` is the argument."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.to_tuple:1
msgid "Convert the complex number to a tuple of its real and imaginary parts."
msgstr ""

#: ../../src/algolib/core/complex.py:docstring of algolib.core.complex.Complex.to_tuple:3
msgid "A tuple `(re, im)` representing the real and imaginary parts."
msgstr ""

#: ../source/api/algolib.core.rst:16
msgid "Module contents"
msgstr ""
