# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, Hideki Hokuto
# This file is distributed under the same license as the Algolib package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Algolib \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-16 16:42+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../source/api/algolib.maths.complex.rst:2
msgid "algolib.maths.complex package"
msgstr ""

#: ../source/api/algolib.maths.complex.rst:5
msgid "Submodules"
msgstr ""

#: ../source/api/algolib.maths.complex.rst:8
msgid "algolib.maths.complex.complex module"
msgstr ""

#: algolib.maths.complex.complex:1 of
msgid ""
"A lightweight Complex number implementation (without using Python's built-in "
"``complex``)."
msgstr ""

#: algolib.maths.complex.complex:3 of
#, python-brace-format
msgid ""
"This module provides a small, well-documented ``Complex`` class suitable for "
"learning and algorithmic implementations. It supports algebraic form (a + "
"bi) and polar form (r·e^{iθ}), with common operations."
msgstr ""

#: algolib.maths.complex.complex:8 of
msgid "Notes"
msgstr ""

#: algolib.maths.complex.complex:9 of
msgid "This class uses plain floats and is immutable."
msgstr ""

#: algolib.maths.complex.complex:10 of
msgid ""
"We intentionally avoid Python's built-in :class:`complex` to practice "
"fundamentals."
msgstr ""

#: algolib.maths.complex.complex:13 of
msgid "Examples"
msgstr ""

#: algolib.maths.complex.complex.Complex:1 of
msgid "Bases: :py:class:`object`"
msgstr ""

#: algolib.maths.complex.complex.Complex:1 of
#, python-brace-format
msgid "Complex number in algebraic form :math:`a + b \\mathrm{i}`."
msgstr ""

#: ../source/api/algolib.maths.complex.rst
msgid "Parameters"
msgstr ""

#: algolib.maths.complex.complex.Complex:3 of
msgid "Real part :math:`a`."
msgstr ""

#: algolib.maths.complex.complex.Complex:5 of
msgid "Imaginary part :math:`b`."
msgstr ""

#: ../source/api/algolib.maths.complex.rst
msgid "Raises"
msgstr ""

#: algolib.maths.complex.complex.Complex:8 of
msgid "If either part is not a real number (int/float)."
msgstr ""

#: algolib.maths.complex.complex.Complex.almost_equal:1 of
msgid "Return True if each component differs by at most ``tol`` (absolute)."
msgstr ""

#: algolib.maths.complex.complex.Complex.almost_equal:3 of
msgid "This is safer than exact float equality."
msgstr ""

#: algolib.maths.complex.complex.Complex.argument:1 of
msgid "Return the principal argument :math:`\\arg z \\in (-\\pi, \\pi]`."
msgstr ""

#: algolib.maths.complex.complex.Complex.argument:3 of
msgid "Uses :func:`math.atan2`."
msgstr ""

#: algolib.maths.complex.complex.Complex.conjugate:1 of
#, python-brace-format
msgid "Return the complex conjugate :math:`\\overline{z} = a - b i`."
msgstr ""

#: algolib.maths.complex.complex.Complex.from_cartesian:1 of
msgid ""
"Construct from Cartesian coordinates (re, im). :param re: Real part. :param "
"im: Imaginary part. :returns: Complex number corresponding to :math:`(re, "
"im)`."
msgstr ""

#: algolib.maths.complex.complex.Complex.from_iterable:1 of
msgid "Construct from an iterable of two numbers."
msgstr ""

#: algolib.maths.complex.complex.Complex.from_iterable:3 of
msgid "Iterable ``(re, im)``."
msgstr ""

#: algolib.maths.complex.complex.Complex.from_iterable:4 of
msgid "If iterable does not have exactly two numeric elements."
msgstr ""

#: algolib.maths.complex.complex.Complex.from_polar:1 of
msgid "Construct from polar coordinates :math:`(r, \\theta)`."
msgstr ""

#: algolib.maths.complex.complex.Complex.from_polar:3 of
msgid "Modulus (radius). Must be non-negative."
msgstr ""

#: algolib.maths.complex.complex.Complex.from_polar:4 of
msgid "Argument (angle in radians)."
msgstr ""

#: algolib.maths.complex.complex.Complex.from_polar:5 of
msgid "If ``r < 0``."
msgstr ""

#: ../source/api/algolib.maths.complex.rst
msgid "Returns"
msgstr ""

#: algolib.maths.complex.complex.Complex.from_polar:6 of
msgid ""
"Complex number corresponding to :math:`r(\\cos\\theta + i\\sin\\theta)`."
msgstr ""

#: algolib.maths.complex.complex.Complex.modulus:1 of
#, python-brace-format
msgid "Return the modulus :math:`\\\\abs{z} = \\\\sqrt{a^2 + b^2}`."
msgstr ""

#: algolib.maths.complex.complex.Complex.normalized:1 of
msgid "Return :math:`z / |z|`. Raises if :math:`z = 0`."
msgstr ""

#: algolib.maths.complex.complex.Complex.to_polar:1 of
msgid ""
"Return ``(r, theta)`` with :math:`r = |z|` and :math:`\\theta = \\arg z`."
msgstr ""

#: algolib.maths.complex.complex.Complex.to_tuple:1 of
msgid "Return ``(re, im)``."
msgstr ""

#: ../source/api/algolib.maths.complex.rst:16
msgid "Module contents"
msgstr ""
