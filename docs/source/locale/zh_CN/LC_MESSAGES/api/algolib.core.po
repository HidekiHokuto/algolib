# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, Hideki Hokuto
# This file is distributed under the same license as the Algolib package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
msgid ""
msgstr ""
"Project-Id-Version: Algolib \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-18 18:17+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../source/api/algolib.core.rst:2
msgid "algolib.core package"
msgstr "algolib.core 包"

#: ../source/api/algolib.core.rst:5
msgid "Submodules"
msgstr "子模块"

#: ../source/api/algolib.core.rst:8
msgid "algolib.core.complex module"
msgstr "algolib.core.complex 模块"

#: algolib.core.complex:1 of
msgid ""
"A lightweight Complex number implementation (without using Python's built-in "
"``complex``)."
msgstr "轻量级复数实现（不使用 Python 内置的 ``complex`` 类型）。"

#: algolib.core.complex:3 of
#, python-brace-format
msgid ""
"This module provides a small, well-documented ``Complex`` class suitable for "
"learning and algorithmic implementations. It supports algebraic form (a + "
"bi) and polar form (r·e^{iθ}), with common operations."
msgstr ""
"本模块提供精简且文档完善的 ``Complex`` 类，适用于算法学习和实现。支持代数形"
"式 (a + bi) 与极坐标形式 (r·e^{iθ})，并包含常用运算。"

#: algolib.core.complex:8 of
msgid "Notes"
msgstr "注意"

#: algolib.core.complex:9 of
msgid "This class uses plain floats and is immutable."
msgstr "本类使用普通浮点数且为不可变对象。"

#: algolib.core.complex:10 of
msgid ""
"We intentionally avoid Python's built-in :class:`complex` to practice "
"fundamentals."
msgstr ""
"为避免依赖内置特性，本类特意不使用 Python 内置的 :class:`complex` 类型。"

#: algolib.core.complex:13 algolib.core.complex.Complex.argument:7
#: algolib.core.complex.Complex.conjugate:7
#: algolib.core.complex.Complex.from_cartesian:12
#: algolib.core.complex.Complex.from_iterable:12
#: algolib.core.complex.Complex.from_polar:15
#: algolib.core.complex.Complex.modulus:7
#: algolib.core.complex.Complex.normalized:9
#: algolib.core.complex.Complex.to_polar:7
#: algolib.core.complex.Complex.to_tuple:7 of
msgid "Examples"
msgstr "示例"

#: algolib.core.complex.Complex:1 of
msgid "Bases: :py:class:`object`"
msgstr "基类：:py:class:`object`"

#: algolib.core.complex.Complex:1 of
#, python-brace-format
msgid "Complex number in algebraic form :math:`a + b \\mathrm{i}`."
msgstr "代数形式的复数 :math:`a + b \\mathrm{i}`。"

#: ../source/api/algolib.core.rst algolib.core.complex.Complex.from_cartesian
#: algolib.core.complex.Complex.from_iterable
#: algolib.core.complex.Complex.from_polar of
msgid "Parameters"
msgstr "参数"

#: algolib.core.complex.Complex:3 of
msgid "Real part :math:`a`."
msgstr "实部 :math:`a`。"

#: algolib.core.complex.Complex:5 of
msgid "Imaginary part :math:`b`."
msgstr "虚部 :math:`b`。"

#: ../source/api/algolib.core.rst algolib.core.complex.Complex.from_iterable
#: algolib.core.complex.Complex.from_polar
#: algolib.core.complex.Complex.normalized of
msgid "Raises"
msgstr "抛出异常"

#: algolib.core.complex.Complex:8 of
msgid "If either part is not a real number (int/float)."
msgstr "当任意部分非实数（int/float）时触发。"

#: algolib.core.complex.Complex.almost_equal:1 of
msgid "Return True if each component differs by at most ``tol`` (absolute)."
msgstr "当各分量绝对误差不超过 ``tol`` 时返回 True。"

#: algolib.core.complex.Complex.almost_equal:3 of
msgid "This is safer than exact float equality."
msgstr "这比直接使用浮点数的精确相等比较更安全。"

#: algolib.core.complex.Complex.argument:1 of
msgid "Compute the principal argument of the complex number."
msgstr "计算复数的主幅角。"

#: algolib.core.complex.Complex.argument algolib.core.complex.Complex.conjugate
#: algolib.core.complex.Complex.from_cartesian
#: algolib.core.complex.Complex.from_iterable
#: algolib.core.complex.Complex.from_polar algolib.core.complex.Complex.modulus
#: algolib.core.complex.Complex.normalized
#: algolib.core.complex.Complex.to_polar algolib.core.complex.Complex.to_tuple
#: of
msgid "Returns"
msgstr "返回"

#: algolib.core.complex.Complex.argument:3 of
msgid "The argument (angle in radians) in the range :math:`(-\\pi, \\pi]`."
msgstr "幅角（弧度制），范围为 :math:`(-\\pi, \\pi]`。"

#: algolib.core.complex.Complex.argument algolib.core.complex.Complex.conjugate
#: algolib.core.complex.Complex.from_cartesian
#: algolib.core.complex.Complex.from_iterable
#: algolib.core.complex.Complex.from_polar algolib.core.complex.Complex.modulus
#: algolib.core.complex.Complex.normalized
#: algolib.core.complex.Complex.to_polar algolib.core.complex.Complex.to_tuple
#: of
msgid "Return type"
msgstr "返回类型"

#: algolib.core.complex.Complex.conjugate:1 of
msgid "Compute the complex conjugate of the number."
msgstr "计算复数的共轭。"

#: algolib.core.complex.Complex.conjugate:3 of
#, python-brace-format
msgid "The conjugate :math:`a - b \\mathrm{i}`."
msgstr "共轭复数 :math:`a - b \\mathrm{i}`。"

#: algolib.core.complex.Complex.from_cartesian:1 of
msgid "Construct a complex number from Cartesian coordinates."
msgstr "以笛卡尔坐标构造复数。"

#: algolib.core.complex.Complex.from_cartesian:3 of
msgid "The real part of the complex number."
msgstr "复数的实部。"

#: algolib.core.complex.Complex.from_cartesian:5 of
msgid "The imaginary part of the complex number."
msgstr "复数的虚部。"

#: algolib.core.complex.Complex.from_cartesian:8 of
msgid "The complex number corresponding to the Cartesian coordinates."
msgstr "由笛卡尔坐标生成的复数。"

#: algolib.core.complex.Complex.from_iterable:1 of
msgid "Construct a complex number from an iterable of two numbers."
msgstr "由一个包含两个数的可迭代对象构造复数。"

#: algolib.core.complex.Complex.from_iterable:3 of
msgid ""
"An iterable containing exactly two elements: the real and imaginary parts."
msgstr "一个恰好包含两个元素的可迭代对象：实部与虚部。"

#: algolib.core.complex.Complex.from_iterable:6 of
msgid "The complex number constructed from the iterable."
msgstr "由可迭代对象构造的复数。"

#: algolib.core.complex.Complex.from_iterable:9 of
msgid "If the iterable does not contain exactly two numeric elements."
msgstr "当可迭代对象不包含恰好两个数值元素时触发。"

#: algolib.core.complex.Complex.from_polar:1 of
msgid "Construct a complex number from polar coordinates."
msgstr "以极坐标形式构造复数。"

#: algolib.core.complex.Complex.from_polar:3 of
msgid "The modulus (radius) of the complex number. Must be non-negative."
msgstr "复数的模（半径）。必须为非负数。"

#: algolib.core.complex.Complex.from_polar:5 of
msgid "The argument (angle in radians) of the complex number."
msgstr "复数的幅角（弧度制）。"

#: algolib.core.complex.Complex.from_polar:8 of
msgid "The complex number corresponding to the polar coordinates."
msgstr "由极坐标生成的复数。"

#: algolib.core.complex.Complex.from_polar:11 of
msgid "If `r` or `theta` is not a real number."
msgstr "当 `r` 或 `theta` 不是实数时触发。"


#: algolib.core.complex.Complex.from_polar:12 of
msgid "If `r` is negative."
msgstr "当 `r` 为负数时触发。"

#: algolib.core.complex.Complex.modulus:1 of
msgid "Compute the modulus (absolute value) of the complex number."
msgstr "计算复数的模（绝对值）。"


#: algolib.core.complex.Complex.modulus:3 of
#, python-brace-format
msgid "The modulus :math:`\\sqrt{a^2 + b^2}`."
msgstr "模长 :math:`\\sqrt{a^2 + b^2}`。"

#: algolib.core.complex.Complex.normalized:1 of
msgid "Normalize the complex number by :math:`z/|z|` to have a modulus of 1."
msgstr "将复数按 :math:`z/|z|` 归一化，使其模为 1。"


#: algolib.core.complex.Complex.normalized:3 of
msgid "The normalized complex number."
msgstr "归一化后的复数。"

#: algolib.core.complex.Complex.normalized:6 of
msgid "If the complex number is zero."
msgstr "当复数为零时触发。"

#: algolib.core.complex.Complex.to_polar:1 of
msgid "Convert the complex number to polar coordinates."
msgstr "将复数转换为极坐标形式。"

#: algolib.core.complex.Complex.to_polar:3 of
msgid ""
"A tuple ``(r, theta)`` where ``r`` is the modulus and ``theta`` is the "
"argument."
msgstr "一个二元组 ``(r, theta)``，其中 ``r`` 为模，``theta`` 为幅角。"

#: algolib.core.complex.Complex.to_tuple:1 of
msgid "Convert the complex number to a tuple of its real and imaginary parts."
msgstr "将复数转换为由实部与虚部组成的元组。"

#: algolib.core.complex.Complex.to_tuple:3 of
msgid "A tuple `(re, im)` representing the real and imaginary parts."
msgstr "一个二元组 `(re, im)`，表示复数的实部与虚部。"


#: ../source/api/algolib.core.rst:16
msgid "Module contents"
msgstr "模块内容"
