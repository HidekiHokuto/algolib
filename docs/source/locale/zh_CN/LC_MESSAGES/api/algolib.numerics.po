# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, Hideki Hokuto
# This file is distributed under the same license as the Algolib package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Algolib \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-25 22:09+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../source/api/algolib.numerics.rst:2
msgid "algolib.numerics package"
msgstr ""

#: ../source/api/algolib.numerics.rst:5
msgid "Submodules"
msgstr ""

#: ../source/api/algolib.numerics.rst:8
msgid "algolib.numerics.constants module"
msgstr ""

#: algolib.numerics.constants:1 of
msgid "Centralized numerical constants for algolib."
msgstr ""

#: algolib.numerics.constants:3 of
msgid "No imports from `math` or third-party libs: *pure Python floats only*."
msgstr ""

#: algolib.numerics.constants:4 of
msgid ""
"Values are given either as exact decimal, or with comments showing hex-float"
msgstr ""

#: algolib.numerics.constants:5 of
msgid "for traceability."
msgstr ""

#: algolib.numerics.constants:6 of
msgid ""
"Includes Cody-Waite style splits for stable range-reduction in exp/sin/cos."
msgstr ""

#: algolib.exceptions.NumericOverflowError:1 of
msgid "Bases: :py:class:`~algolib.exceptions.AlgolibError`, :py:class:`OverflowError`"
msgstr ""

#: algolib.exceptions.NumericOverflowError:1 of
msgid "Numeric overflow exposed as algolib-specific error."
msgstr ""

#: ../source/api/algolib.numerics.rst:16
msgid "algolib.numerics.diff module"
msgstr ""

#: algolib.numerics.diff.derivative_central:1 of
msgid ""
"Central difference derivative approximation with Richardson extrapolation."
msgstr ""

#: algolib.numerics.diff.derivative_central:3 of
msgid ""
"Useful when f does not support complex input. Accuracy is O(h^2) per step "
"and improved by extrapolation."
msgstr ""

#: algolib.numerics.diff.derivative_cstep:1 of
msgid "Complex-step derivative approximation:"
msgstr ""

#: algolib.numerics.diff.derivative_cstep:3 of
msgid "f'(x) ≈ Im(f(x + i*h)) / h"
msgstr ""

#: algolib.numerics.diff.derivative_cstep:5 of
msgid ""
"Requires f to support complex input. Very stable since there is no "
"subtractive cancellation."
msgstr ""

#: ../source/api/algolib.numerics.rst:24
msgid "algolib.numerics.stable module"
msgstr ""

#: algolib.numerics.stable.hypot:1 of
#, python-brace-format
msgid "Stable :math:`\\sqrt{x^2 + y^2}` with overflow/underflow protections."
msgstr ""

#: algolib.numerics.stable.hypot_n:1 of
#, python-brace-format
msgid ""
"Stable Euclidean norm for :math:`N` components: :math:`\\sqrt{\\sum_i "
"xs[i]^2}`."
msgstr ""

#: ../source/api/algolib.numerics.rst:32
msgid "algolib.numerics.trig module"
msgstr ""

#: algolib.numerics.trig.cos:1 of
msgid "Cosine of an angle (system backend)."
msgstr ""

#: ../source/api/algolib.numerics.rst
msgid "Parameters"
msgstr ""

#: algolib.numerics.trig.cos:3 algolib.numerics.trig.sin:3
#: algolib.numerics.trig.tan:9 of
msgid "Input angle in radians."
msgstr ""

#: ../source/api/algolib.numerics.rst
msgid "Returns"
msgstr ""

#: algolib.numerics.trig.cos:6 of
msgid "``cos(x)`` evaluated by the active numerics backend."
msgstr ""

#: ../source/api/algolib.numerics.rst
msgid "Return type"
msgstr ""

#: algolib.numerics.trig.sin:1 of
msgid "Sine of an angle (system backend)."
msgstr ""

#: algolib.numerics.trig.sin:6 of
msgid "``sin(x)`` evaluated by the active numerics backend."
msgstr ""

#: algolib.numerics.trig.tan:1 of
msgid "Tangent of an angle (system backend)."
msgstr ""

#: algolib.numerics.trig.tan:4 of
msgid "Notes"
msgstr ""

#: algolib.numerics.trig.tan:5 of
msgid ""
"Argument-reduction and non-finite handling are performed inside the active "
"backend (see ``_backend.SystemTrigBackend.tan``). Keeping this wrapper free "
"of extra reduction ensures consistent periodicity tests."
msgstr ""

#: algolib.numerics.trig.tan:12 of
msgid "``tan(x)`` evaluated by the active numerics backend."
msgstr ""

#: ../source/api/algolib.numerics.rst:40
msgid "algolib.numerics.trig\\_pure module"
msgstr ""

#: algolib.numerics.trig_pure:1 of
msgid "Numerical trig functions: sin / cos / tan"
msgstr ""

#: algolib.numerics.trig_pure:3 of
msgid "No stdlib math usage in implementation"
msgstr ""

#: algolib.numerics.trig_pure:4 of
msgid "Cody-Waite style range reduction by π/2"
msgstr ""

#: algolib.numerics.trig_pure:5 of
msgid "Polynomial approximation on [-π/4, π/4]"
msgstr ""

#: algolib.numerics.trig_pure.PureTrigBackend:1 of
msgid "Bases: :py:class:`object`"
msgstr ""

#: algolib.numerics.trig_pure.PureTrigBackend:1 of
msgid "Wrap current pure-Python trig implementations as a backend."
msgstr ""

#: ../source/api/algolib.numerics.rst:48
msgid "Module contents"
msgstr ""
