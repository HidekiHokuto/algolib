# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, Hideki Hokuto
# This file is distributed under the same license as the Algolib package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Algolib \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-18 17:41+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../source/api/algolib.maths.algebra.rst:2
msgid "algolib.maths.algebra package"
msgstr "algolib.maths.algebra 包"

#: ../source/api/algolib.maths.algebra.rst:5
msgid "Submodules"
msgstr "子模块"

#: ../source/api/algolib.maths.algebra.rst:8
msgid "algolib.maths.algebra.matrix\\_dense module"
msgstr ""

#: algolib.maths.algebra.matrix_dense.MatrixDense:1
#: algolib.maths.algebra.polynomial.Polynomial:1 of
msgid "Bases: :py:class:`object`"
msgstr ""

#: algolib.maths.algebra.matrix_dense.MatrixDense:1 of
msgid "A simple dense matrix (row-major) without external dependencies."
msgstr ""

#: algolib.maths.algebra.matrix_dense.MatrixDense:3 of
msgid ""
"Designed for correctness and clarity (teaching/learning oriented). Not "
"optimized for large-scale numerical workloads."
msgstr ""

#: ../source/api/algolib.maths.algebra.rst
msgid "Parameters"
msgstr ""

#: algolib.maths.algebra.matrix_dense.MatrixDense:6 of
msgid "Row-major data. Must be rectangular (all rows same length)."
msgstr ""

#: ../source/api/algolib.maths.algebra.rst
msgid "Raises"
msgstr ""

#: algolib.maths.algebra.matrix_dense.MatrixDense:9 of
msgid "If rows are not sequences of numbers."
msgstr ""

#: algolib.maths.algebra.matrix_dense.MatrixDense:10 of
msgid "If matrix is empty or not rectangular."
msgstr ""

#: algolib.maths.algebra.matrix_dense.MatrixDense:13
#: algolib.maths.algebra.polynomial:8 of
msgid "Examples"
msgstr ""

#: algolib.maths.algebra.matrix_dense.MatrixDense.T:1 of
msgid "Transpose."
msgstr ""

#: algolib.maths.algebra.matrix_dense.MatrixDense.copy:1 of
msgid "Shallow copy (rows are tuples; safe)."
msgstr ""

#: algolib.maths.algebra.matrix_dense.MatrixDense.det:1 of
msgid "Determinant via Gaussian elimination with partial pivoting (O(n^3))."
msgstr ""

#: algolib.maths.algebra.matrix_dense.MatrixDense.det:3 of
msgid "If matrix is not square."
msgstr ""

#: algolib.maths.algebra.matrix_dense.MatrixDense.equals:1 of
msgid "Element-wise comparison with tolerance for floats."
msgstr ""

#: algolib.maths.algebra.matrix_dense.MatrixDense.identity:1 of
msgid "Alias of :func:`identity`."
msgstr ""

#: algolib.maths.algebra.matrix_dense.MatrixDense.from_rows:1 of
msgid "Construct from row-major data (alias of the constructor)."
msgstr ""

#: algolib.maths.algebra.matrix_dense.MatrixDense.identity:1 of
msgid "Return the :math:`n \\times n` identity matrix."
msgstr ""

#: algolib.maths.algebra.matrix_dense.MatrixDense.inv:1 of
msgid "Inverse via Gauss-Jordan elimination (O(n^3))."
msgstr ""

#: algolib.maths.algebra.matrix_dense.MatrixDense.inv:3 of
msgid "If matrix is not square or singular."
msgstr ""

#: algolib.maths.algebra.matrix_dense.MatrixDense.matvec:1 of
msgid "Matrix-vector product (Ax)."
msgstr ""

#: algolib.maths.algebra.matrix_dense.MatrixDense.matvec:3 of
msgid "Vector of length equal to number of columns."
msgstr ""

#: ../source/api/algolib.maths.algebra.rst
msgid "Returns"
msgstr ""

#: algolib.maths.algebra.matrix_dense.MatrixDense.matvec:6 of
msgid "Resulting vector."
msgstr ""

#: ../source/api/algolib.maths.algebra.rst
msgid "Return type"
msgstr ""

#: algolib.maths.algebra.MatrixDense.shape:1
#: algolib.maths.algebra.matrix_dense.MatrixDense.shape:1 of
msgid "(n_rows, n_cols)"
msgstr ""

#: algolib.maths.algebra.matrix_dense.MatrixDense.zeros:1 of
msgid ""
"Return an :math:`(n_{\\mathrm{rows}} × n_{\\mathrm{cols}})` zero matrix."
msgstr ""

#: ../source/api/algolib.maths.algebra.rst:16
#, fuzzy
msgid "algolib.maths.algebra.polynomial module"
msgstr "algolib.maths.algebra 包"

#: algolib.maths.algebra.polynomial:1 of
msgid "A lightweight univariate polynomial with real coefficients."
msgstr ""

#: algolib.maths.algebra.polynomial:3 of
msgid ""
"Coefficients are in **ascending** degree order: ``p(x) = c0 + c1 x + ... + "
"cn x^n``."
msgstr ""

#: algolib.maths.algebra.polynomial:4 of
msgid "Immutable API; internal representation is a tuple of floats."
msgstr ""

#: algolib.maths.algebra.polynomial:5 of
msgid ""
"Supports +, -, * (convolution), evaluation (Horner), derivative, integral."
msgstr ""

#: algolib.maths.algebra.polynomial.Polynomial:1 of
msgid "Univariate polynomial with real coefficients."
msgstr ""

#: algolib.maths.algebra.polynomial.Polynomial:3 of
#, python-brace-format
msgid ""
"Coefficients in ascending degree order: ``[c0, c1, ..., cn]`` "
"represents :math:`\\sum_{k=0}^n c_k x^k`."
msgstr ""

#: algolib.maths.algebra.polynomial.Polynomial:7 of
msgid "If ``coeffs`` contains non-numeric types."
msgstr ""

#: algolib.maths.algebra.polynomial.Polynomial:8 of
msgid "If ``coeffs`` is empty."
msgstr ""

#: algolib.maths.algebra.polynomial.Polynomial.constant:1 of
msgid "Return constant polynomial ``p(x)=c``."
msgstr ""

#: algolib.maths.algebra.Polynomial.degree:1
#: algolib.maths.algebra.polynomial.Polynomial.degree:1 of
msgid "Return the degree (``len(coeffs)-1``), with ``deg(0)=0`` by convention."
msgstr ""

#: algolib.maths.algebra.polynomial.Polynomial.derivative:1 of
msgid ""
"Return the analytical derivative p'(x). If p(x) = a0 + a1*x + ... + an*x^n, "
"then p'(x) = a1 + 2*a2*x + ... + n*an*x^(n-1)."
msgstr ""

#: algolib.maths.algebra.polynomial.Polynomial.identity:1 of
msgid "Return multiplicative identity polynomial ``1``."
msgstr ""

#: algolib.maths.algebra.polynomial.Polynomial.integral:1 of
msgid ""
"Return an antiderivative :math:`\\\\int p(x)dx` with constant term ``c0``."
msgstr ""

#: algolib.maths.algebra.polynomial.Polynomial.integral:3 of
#, python-brace-format
msgid ":math:`\\\\int c_k x^k dx = \\\\frac{c_k}{k+1} x^{k+1}`"
msgstr ""

#: algolib.maths.algebra.polynomial.Polynomial.zeros:1 of
msgid ""
"Return the zero polynomial of (at most) given degree (all coefficients 0)."
msgstr ""

#: algolib.maths.algebra.polynomial.Polynomial.zeros:3 of
msgid "Non-negative degree."
msgstr ""

#: ../source/api/algolib.maths.algebra.rst:24
msgid "Module contents"
msgstr ""
